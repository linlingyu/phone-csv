var path = require('path'),
    fs = require('fs'),
    iconv = require('iconv-lite');

function singleByte(str){//全角数字转换为半角数字
    return str.replace(/[\uff01-\uff5e]/g, function(a){
        return String.fromCharCode(a.charCodeAt(0)-65248);
    }).replace(/\u3000/g, " ");
}

function getNumber(str){
    var rd = /\:([\d-－]{5,})$/,//数字，5位起
        rmobile = /(0|\+86)?1\d{10}/g,//手机
        rphone = /^(\d{3,4}[-－]?)?\d{5,10}$/,//标准固话
        ret = '', temp;
    if(~str.indexOf(':')){
        ret = str.split(':')[1];
        ret = ((temp = ret.match(rmobile)) || (temp = ret.match(rphone))) ? temp[0] : '';
    } else if ( (ret = str.match(rmobile)) || (ret = str.match(rphone)) ){
        ret = ret[0];
    } else{ret = '';}
    return ret;
}

function noRepeat(array){//一行去重
    var mapping = {};
    array.forEach(function(item){
        if(!item){return;}
        mapping[item] = 1;
    });
    array.forEach(function(item, index){
        if(!item){return;}
        if(mapping[item]){
            mapping[item] = 0;
        }else{
            array[index] = '';
        }
    });
}

exports.getInstance = function(){
    return {
        parse: function(filePath, options){
            debugger;
            var buf = fs.readFileSync(path.normalize(filePath)),
                content = singleByte(iconv.decode(buf, 'gbk')),
                separator = options.separator || ';',
                count = 0,
                contentMapping = {};
            //
            // content = content.replace(/((^|;)")?""(";)?/g, function(mc){//两双引号换成&&
            content = content.replace(new RegExp('((^|'+separator+')")?""("'+separator+')?', 'g'), function(mc){//两双引号换成&&
                var ret = mc;
                if(mc === '"""'){// '"这种情况(开头)
                    ret = '"&&';
                }else if(mc === separator+'"""'){// ;'"(一个cell的开头)
                    ret = separator+'"&&';
                }else if(mc === '"""'+separator){// "';(结尾)
                    ret = '&&"'+separator;
                }else{// (中间)
                    ret = '&&';
                }
                return ret;
            });
            content = content.replace(/"[^"]+"/g, function(mc){
                var key = 'file-user-' + (count++);
                contentMapping[key] = mc;
                return key;
            });

            var array = content.split(/[\r\n]/g),
                ret = [];
            array.forEach(function(item, index){
                var row = item.split(separator),
                    dataRow = {key: contentMapping[row[0]] || row[0], row: []};
                dataRow.key = dataRow.key.replace('&&', '""');
                // dataRow.key = iconv.encode(dataRow.key, 'gbk').toString();
                row.forEach(function(val, currIndex){
                    if(currIndex === 0){return;}
                    val = contentMapping[val] || val;
                    dataRow.row.push(getNumber(val));
                });
                noRepeat(dataRow.row);//横向去重
                ret.push(dataRow);
            });
            return ret;
        },

        buffer: function(data, options){
            var ret = [],
                separator = options.separator || ';';
            data.forEach(function(item, index){
                ret.push(item.key, separator, item.row.join(separator), '\r\n');
            });
            return iconv.encode(ret.join(''), 'gbk');
        }
    };
}